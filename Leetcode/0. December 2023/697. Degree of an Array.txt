class Solution {
    public int findShortestSubArray(int[] nums) {
        int n = nums.length, max = 0, ans = Integer.MAX_VALUE;

        for(int i=0; i<n; i++){
            if(max < nums[i]){
                max = nums[i];
            }
        }
        int [] temp = new int[max + 1];

        for( int i = 0; i < n; i++ ){
            temp[nums[i]]++;
        }
        int maxOccured = 0;
        for(int i=0; i < temp.length ; i++){
            if(maxOccured < temp[i]){
                maxOccured = temp[i];
            }
        }



        for(int i = 0; i < temp.length; i++){
            if(temp[i] == maxOccured){
                int val = i, j = 0, k = n-1;
                while(j<n && nums[j] != val) j++;
                while(k >= 0 && nums[k] != val) k--;

                ans = Math.min(ans, k-j+1);
            }
        }

        
        return ans;
        

        //Solved using Hashmap

        
        // HashMap<Integer, Integer> mp = new HashMap<>();

        // for (int i = 0; i < n; i++)
        // {
        //     if (mp.containsKey(nums[i])) 
        //     {
        //         mp.put(nums[i], mp.get(nums[i]) + 1);
        //     } 
        //     else
        //     {
        //         mp.put(nums[i], 1);
        //     }
        // }
        // int maxValueInMap = (Collections.max(mp.values()));

        // for (Map.Entry<Integer, Integer> entry : mp.entrySet()) {
 
        //     if (entry.getValue() == maxValueInMap) {
        //         int val = entry.getKey(), i = 0, j = n-1;

        //         while( i < n && nums[i] != val) i++;
        //         while( j >= 0 && nums[j] != val) j--;

        //         ans = Math.min(ans, j-i+1);
        //     }
        // }
    }
}