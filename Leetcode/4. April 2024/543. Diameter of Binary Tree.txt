/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //variable that calculate diameter of binary tree
    int max = 0;

    public int diameterOfBinaryTree(TreeNode root) {
        // Traversal of tree 
        traversal(root);
        return max;
    }

    private int traversal(TreeNode root){
        //Return height of null
        if(root == null){
            return 0;
        }
        //Height of left and right
        int left = traversal(root.left);
        int right = traversal(root.right);

        // Check global max variable either find sol or move further
        max = Math.max(max, left + right);

        // Return height of tree rooted at this node
        return Math.max(left, right) + 1;
    }
}